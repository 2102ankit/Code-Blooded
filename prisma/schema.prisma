// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator json {
    provider = "prisma-json-types-generator"
    // namespace = "PrismaJson"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Project {
    id              String    @id @default(uuid())
    key             String    @unique
    name            String
    projectLead     String
    defaultAssignee String?
    imageUrl        String?
    admin           String
    createdAt       DateTime  @default(now())
    updatedAt       DateTime? @updatedAt
    deletedAt       DateTime?
    members         Member[]
}

model Member {
    id        String  @id
    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    @@index([projectId])
}

enum IssueType {
    BUG
    TASK
    STORY
    EPIC
}

enum IssueStatus {
    TODO
    IN_PROGRESS
    DONE
}

model Issue {
    id           String      @id @default(uuid())
    key          String      @unique
    name         String
    description  String?     @db.Text()
    status       IssueStatus @default(TODO)
    type         IssueType   @default(TASK)
    listPosition Int
    reporterId   String      @default("1")
    assigneeId   String?
    parentKey    String?
    sprintId     String?
    isDeleted    Boolean     @default(false)
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    deletedAt    DateTime?
    comments     Comment[]
    logs         Log[]
    Sprint       Sprint?     @relation(fields: [sprintId], references: [id])

    @@index([sprintId])
}

enum SprintStatus {
    ACTIVE
    PENDING
    CLOSED
}

model Sprint {
    id          String       @id @default(uuid())
    name        String
    description String?      @default("")
    startDate   DateTime?
    endDate     DateTime?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime?    @updatedAt
    deletedAt   DateTime?
    status      SprintStatus @default(PENDING)
    issues      Issue[]
}

model Comment {
    id        String    @id @default(uuid())
    content   String    @db.Text()
    author    String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    issueId   String?
    logId     String?
    Issue     Issue?    @relation(fields: [issueId], references: [id])

    @@index([author])
    @@index([issueId])
}

model Log {
    id        String    @id @default(uuid())
    content   String    @db.Text()
    author    String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    issueId   String?
    Issue     Issue?    @relation(fields: [issueId], references: [id])

    @@index([author])
    @@index([issueId])
}
